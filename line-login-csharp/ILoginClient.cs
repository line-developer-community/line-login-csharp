using System.Threading.Tasks;
using LineDC.Login.Models;

namespace LineDC.Login
{
    /// <summary>
    /// Line Login Client Interface
    /// </summary>
    public interface ILoginClient
    {     
        /// <summary>
        /// Channel ID. Unique identifier for your channel issued by LINE.
        /// </summary>
        string ChannelId { get; set; }

        /// <summary>
        /// Channel Secret. Unique secret for your channel issued by LINE.
        /// </summary>
        string ChannelSecret { get; set; }

        /// <summary>
        /// Callback URL. URL that users are redirected to after authentication and authorization. Must match one of the the callback URLs registered for your channel in the console.
        /// </summary>
        string RedirectUri { get; set; }

        /// <summary>
        /// A unique alphanumeric string used to prevent cross-site request forgery. This value should be randomly-generated by your application. Cannot be a URL-encoded string.
        /// </summary>
        string State { get; set; }

        /// <summary>
        /// Permissions granted by the user. You can specify multiple scopes using the URL encoded whitespace character (%20). For more information, see scopes.
        /// </summary>
        Scope Scope { get; set; }

        /// <summary>
        /// A string used to prevent replay attacks. This value is returned in an ID token.
        /// </summary>
        string Nonce { get; set; }

        /// <summary>
        /// consent. Used to force the consent screen to be displayed even if the user has already granted all requested permissions.
        /// </summary>
        bool Prompt { get; set; }

        /// <summary>
        /// Displays an option to add a bot as a friend during login. Set value to either normal or aggressive. For more information, see Linking a bot with your LINE Login channel.
        /// </summary>
        BotPrompt? BotPrompt { get; set; }

        /// <summary>
        /// Craft Authorization Uri
        /// https://developers.line.me/en/docs/line-login/web/integrate-line-login/#spy-making-an-authorization-request
        /// </summary>
        /// <returns>Authorization Uri</returns>
        string GetAuthUri();

        /// <summary>
        /// Get friendship status
        /// Gets the friendship status of the user and the bot linked to your LINE Login channel.
        /// Note: Requires an access token with the profile scope. For more information, see Making an authorization request and Scopes.
        /// Note: You must have a bot linked with your channel.For more information, see Linking a bot with your LINE Login channel.
        /// https://developers.line.me/en/reference/social-api/#get-friendship-status
        /// </summary>
        /// <param name="accessToken"></param>
        /// <returns>FriendshipStatusResponse</returns>
        Task<FriendshipStatusResponse> GetFriendshipStatus(string accessToken);

        /// <summary>
        /// Get user profile
        /// Gets a user's display name, profile image, and status message.
        /// https://developers.line.me/en/reference/social-api/#get-user-profile
        /// </summary>
        /// <param name="accessToken"></param>
        /// <returns>Profile</returns>
        Task<Profile> GetProfile(string accessToken);

        /// <summary>
        /// Getting an access token
        /// To get an access token, make an HTTP POST request with the authorization code.Once you have an access token, you can use it to make API calls.The access token is issued at the following endpoint.
        /// https://developers.line.me/en/reference/social-api/#issue-access-token
        /// </summary>
        /// <param name="code">Authorization code</param>
        /// <returns>TokenResponse</returns>
        Task<TokenResponse> GetToken(string code);

        /// <summary>
        /// Refreshing access tokens
        /// To refresh an access token, make an HTTP POST request to the following endpoint with the refresh token in the request body.
        /// https://developers.line.me/en/reference/social-api/#refresh-access-token
        /// </summary>
        /// <param name="refreshToken">RefreshToken</param>
        /// <returns>TokenResponse</returns>
        Task<TokenResponse> RefreshAccessToken(string refreshToken);

        /// <summary>
        /// Logging out users (v2)
        /// https://developers.line.me/en/reference/social-api/#revoke-access-token
        /// </summary>
        /// <param name="accessToken">Refresh token string</param>
        /// <returns>True if revoked, otherwise false</returns>
        Task<bool> Revoke(string accessToken);

        /// <summary>
        /// Verifying access tokens
        /// To verify whether an access token is valid, send an HTTP GET request to the following endpoint with the access token in the request body.
        /// https://developers.line.me/en/reference/social-api/#verify-access-token
        /// </summary>
        /// <param name="accessToken">AccessToken</param>
        /// <returns>VerifyResponse</returns>
        Task<VerifyResponse> VerifyAccessToken(string accessToken);
    }
}